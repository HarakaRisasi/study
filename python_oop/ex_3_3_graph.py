"""#### Анализ задачи

1. **Определение цели:**
   - Реализовать класс `Graph`, позволяющий создавать объекты для работы с графическими данными.
   - Основные функции:
     - Хранение списка числовых данных.
     - Возможность отображения данных в виде таблицы, графика и столбчатой диаграммы.
     - Управление доступностью отображения данных.

2. **Ключевые детали реализации:**
   - **Входные данные:**
     - Список числовых значений, передаваемых при создании объекта.
   - **Ожидаемый результат:**
     - Методы для отображения данных работают корректно, включая обработку случаев сокрытия данных.

3. **Требования к задаче:**
   - При создании объекта копировать входной список данных.
   - Поддерживать булево свойство `is_show`, определяющее возможность отображения данных.
   - Реализовать методы: `set_data`, `show_table`, `show_graph`, `show_bar`, `set_show`.
   - Если отображение закрыто, методы должны выводить сообщение `"Отображение данных закрыто"`.

---

#### Планирование

1. **Шаги выполнения задачи:**
   - Создать класс `Graph`.
   - Реализовать методы:
     - `__init__` для инициализации объекта.
     - `set_data` для обновления данных.
     - `show_table`, `show_graph`, `show_bar` для отображения данных.
     - `set_show` для изменения состояния отображения.
   - Проверить корректность работы через пример ввода и вывода.

2. **Ключевые элементы:**
   - Свойства: `data` (копия переданного списка), `is_show` (булево значение).
   - Методы для обработки и отображения данных.

3. **Особые случаи:**
   - Если `is_show = False`, отображение данных заблокировано.

---

#### Тестирование

1. **Проверка корректности:**
   - Создать объект с тестовыми данными.
   - Проверить корректность вывода методов отображения.
   - Проверить обработку изменения состояния через `set_show`.

2. **Проверка требований:**
   - Убедиться, что данные копируются при создании объекта.
   - Проверить корректность вывода сообщения при закрытии отображения.

3. **Оценка результата:**
   - Вывод программы соответствует ожидаемому результату."""


class Graph:
    def __init__(self, data):
        self.data = data.copy()
        self.is_show = True

    def set_data(self, data):
        self.data = data.copy()

    def show_table(self):
        if self.is_show:
            print(" ".join(map(str, self.data)))
        else:
            print("Отображение данных закрыто")

    def show_graph(self):
        if self.is_show:
            print(f"Графическое отображение данных: {' '.join(map(str, self.data))}")
        else:
            print("Отображение данных закрыто")

    def show_bar(self):
        if self.is_show:
            print(f"Столбчатая диаграмма: {' '.join(map(str, self.data))}")
        else:
            print("Отображение данных закрыто")

    def set_show(self, fl_show):
        self.is_show = fl_show

# Чтение данных Input Data: 8 11 10 -32 0 7 18
data_graph = list(map(int, input().split()))

gr = Graph(data_graph)

# Вызов методов
gr.show_bar()
gr.set_show(False)
gr.show_table()
