"""### Анализ задачи

#### 1. Определение цели:
- **Цель**: Реализовать три класса геометрических фигур: `Line`, `Rect`, `Ellipse`.
- **Функции**:
  - Хранение координат объектов.
  - Создание объектов с заданными координатами.
  - Обнуление координат объектов класса `Line`.

#### 2. Ключевые детали реализации:
- Входные данные: Координаты (четыре числа) для создания каждого объекта.
- Выходные данные: Список объектов классов, где для объектов `Line` координаты обнулены.

#### 3. Требования к задаче:
- Использовать случайное распределение для выбора класса объекта и генерации координат.
- Сохранять координаты в свойствах `sp` и `ep` каждого объекта в виде кортежей.
- Модифицировать только координаты объектов класса `Line`.

---

### Планирование

#### 1. Шаги выполнения задачи:
1. Реализовать три класса `Line`, `Rect`, `Ellipse`.
2. Написать логику для создания 217 объектов случайных классов с случайными координатами.
3. Сохранить объекты в список `elements`.
4. Обнулить координаты объектов класса `Line`.

#### 2. Ключевые элементы:
- Классы `Line`, `Rect`, `Ellipse` с атрибутами `sp` и `ep`.
- Функция для генерации случайных чисел для координат.
- Итерация по списку объектов для выполнения модификации.

#### 3. Особые случаи:
- Проверка на корректность типа объекта перед обнулением координат.

---

### Тестирование

1. Проверка корректности:
- Создание объектов всех трех типов.
- Проверка значений `sp` и `ep`.
- Обнуление координат только у объектов `Line`.

2. Проверка требований:
- Убедиться, что генерируется ровно 217 объектов.
- Случайное распределение классов и координат.

3. Оценка результата:
- Список объектов должен содержать корректные координаты, кроме объектов `Line`, для которых координаты обнулены.

---

### Примечания
- Для генерации случайных чисел использовать модуль `random`.
- Оптимизировать код для простоты и читаемости.
- Проверить корректность изменения координат в списке.
"""

from random import (randint, choice)
import unittest

# Классы геометрических фигур
class Line:
    def __init__(self, a, b, c, d):
        self.sp = (a, b) # Координаты верхнего правого угла.
        self.ep = (c, d) # Координаты нижнего левого угла.

class Rect:
    def __init__(self, a, b, c, d):
        self.sp = (a, b)
        self.ep = (c, d)

class Ellipse:
    def __init__(self, a, b, c, d):
        self.sp = (a, b)
        self.ep = (c, d)

# Создание списка элементов
elements = []

for _ in range(217):
    # Генерация случайных координат
    a, b, c, d = [randint(-100, 100) for _ in range(4)]
    # Случайный выбор класса
    cls = choice([Line, Rect, Ellipse])
    elements.append(cls(a, b, c, d))

# Обнуление координат объектов класса Line
for obj in elements:
    if isinstance(obj, Line): # Проверяю принадлежность объекта к классу.
        obj.sp = (0, 0)
        obj.ep = (0, 0)