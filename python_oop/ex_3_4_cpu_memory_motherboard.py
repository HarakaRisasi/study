"""
Анализ задачи

1. **Определение цели:**
   - Реализовать три класса: `CPU`, `Memory`, `MotherBoard`.
   - Обеспечить возможность создания объектов каждого класса с указанными параметрами.
   - Реализовать метод `get_config` для класса `MotherBoard`, возвращающий конфигурацию компонентов.

2. **Ключевые детали реализации:**
   - Входные данные:
     - Для класса `CPU`: название и тактовая частота.
     - Для класса `Memory`: название и объем памяти.
     - Для класса `MotherBoard`: название, объект класса `CPU`, список из объектов класса `Memory` (максимум 4).
   - Выходные данные:
     - Метод `get_config` должен возвращать список из четырех строк, описывающих конфигурацию материнской платы.
   - Атрибуты объектов:
     - `CPU`: `name`, `fr`.
     - `Memory`: `name`, `volume`.
     - `MotherBoard`: `name`, `cpu`, `total_mem_slots`, `mem_slots`.

3. **Требования к задаче:**
   - Атрибут `total_mem_slots` в классе `MotherBoard` фиксирован и равен 4.
   - Список памяти (`mem_slots`) не должен превышать количество слотов.

**Планирование**

1. **Шаги выполнения задачи:**
   - Создать классы `CPU`, `Memory`, `MotherBoard`.
   - Реализовать атрибуты и метод `get_config` для класса `MotherBoard`.
   - Проверить корректность создания объектов и работы метода.

2. **Ключевые элементы:**
   - Класс `CPU`: реализовать конструктор для задания названия и тактовой частоты.
   - Класс `Memory`: реализовать конструктор для задания названия и объема памяти.
   - Класс `MotherBoard`: реализовать конструктор для задания названия, процессора и списка памяти.

3. **Особые случаи:**
   - Если количество переданных объектов `Memory` превышает 4, учитывать только первые 4.
   - Проверить, что метод `get_config` корректно формирует строку с учетом количества слотов памяти.

**Тестирование**

1. **Проверка корректности:**
   - Создать объект `MotherBoard` с одним объектом `CPU` и двумя объектами `Memory`.
   - Проверить метод `get_config` на соответствие формату.

2. **Проверка требований:**
   - Убедиться, что `total_mem_slots` не изменяем.
   - Проверить, что количество слотов памяти не превышает лимит.

3. **Оценка результата:**
   - Убедиться, что создаваемый объект и метод `get_config` работают без ошибок и выдают ожидаемый результат.
"""

class CPU:
    def __init__(self, name, fr):
        self.name = name
        self.fr = fr


class Memory:
    def __init__(self, name, volume):
        self.name = name
        self.volume = volume


class MotherBoard:
    def __init__(self, name, cpu, *mem_slots):
        self.name = name
        self.cpu = cpu
        self.total_mem_slots = 4
        self.mem_slots = list(mem_slots[:self.total_mem_slots])

    def get_config(self):
        mem_info = "; ".join(f"{mem.name} - {mem.volume}" for mem in self.mem_slots)
        return [
            f"Материнская плата: {self.name}",
            f"Центральный процессор: {self.cpu.name}, {self.cpu.fr}",
            f"Слотов памяти: {self.total_mem_slots}",
            f"Память: {mem_info}"
        ]


# Создание объектов
cpu = CPU("Intel Core i7", "3.4 GHz")
mem1 = Memory("Kingston", "8 GB")
mem2 = Memory("Corsair", "16 GB")
mb = MotherBoard("ASUS ROG", cpu, mem1, mem2)