0) Алгоритм - представляет собой набор команд для выполнения какой-либо команды.
   При этом все данные, необходимые для её решения, организуются особым образом в так называемую СТРУКТУРУ.
   [Массив, Связанный список, дерево, граф, сеть или "что-то более замысловатое"]

1) Чтобы понять работу алгоритма нужно.
- Выяснить поведение алгоритма - находит ли он лучшее или просто хорошее решение?
- Скорость алгоритма - Быстрый он или нет?
- Требования к памяти у алгоритма - Сколько памяти нужно алгоритму для работы?
- Выделить основные методы используемые в алгоритме - Можно ли задействовать повторно для решения подобных задач?

2) Способы оценки сложности

O (О-большое) Скопировать ссылку "O (О-большое)"
O, читается как «О», «О-большое» или «биг (big) О», описывает оценку сложности сверху. 
То есть максимальное количество операций, которое алгоритм может выполнить в худшем случае. 
В скобках после О указывают функцию, которая ограничивает сложность. 
Например, O(n) означает, что сложность алгоритма растёт линейно. 
Это означает, что время выполнения алгоритма увеличивается прямо пропорционально размеру входных данных 
(к примеру, есть список из 10 элементов, алгоритм займёт определённое время. 
Но если будет 20 элементов, то алгоритм займёт в два раза больше времени). 
При этом как именно линейно не важно.

Ω (сигма) Скопировать ссылку "Ω (сигма)"
Ω, читается как «Сигма» или «Сигма-большая», описывает оценку сложности снизу. 
То есть минимальное количество операций, которое алгоритм будет выполнять в лучшем случае. 
В скобках после Ω указывают функцию, которая ограничивает сложность. 
Например Ω(n) означает, что сложность растёт так же или быстрее, чем линейно. 
Например, квадратичная сложность n × n — это тоже Ω(n).

Θ, читается как «Тета» или «Тета-большая», описывает плотную оценку алгоритма. 
В скобках после ϴ указывают функцию, которая ограничивает сложность как сверху, так и снизу.