Асимптотическая сложность алгоритмов
Иначе говоря ПРОИЗВОДИТЕЛЬНОСТЬ определяется функцией, которая показывает
насколько ухудшается производительность с усложнением поставленной задачи. BIG O.

Существует пять основных правил для расчёта синтетической сложности алгоритма:

1) Если для математической функции F алгоритму необходимо выполнить определённые действия
   f(N) раз, тот для этого ему понадобится сделать O(f(N)) шагов.

2) Если алгоритм выполняет одно операцию, состоящую из O(f(N)) шагов, 
   а затем вторую операцию, включающую O(g(N)) шагов, 
   то общая производительность алгоритма для функции f и g составит O(f(N) + g(N)).

3) Если алгоритму необходимо сделать O(f(N) + g(N)) шагов и область значений
   N функции f(N) больше, чем у g(N), то асимптотическую сложность можно упростить до
   выражения O(f(N))

4) Если алгоритму внутри каждого шага O(f(N)) одной операции приходится выполнять ещё
   O(g(N)) шагов другой операции, то общая производительность алгоритма составит
   O(f(N) * g(N))

5) Постоянными множителями (константами) можно пренебречь. Если C является константой,
   то O(C * f(N)) или O(f(C * N)) можно записать как O(f(N))