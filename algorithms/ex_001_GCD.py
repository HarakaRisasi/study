def gcd(a, b):
    """
    Вычисляет наибольший общий делитель (НОД) двух целых чисел a и b
    с использованием алгоритма Евклида.

    Аргументы:
    a (int): Первое целое число.
    b (int): Второе целое число.

    Возвращает:
    int: Наибольший общий делитель чисел a и b.

    Алгоритм:
    - В цикле while вычисляется остаток от деления a на b.
    - Затем значения a и b обновляются:
      a становится равным b, а b - равным остатку.
    - Цикл продолжается до тех пор, пока b не станет равно 0.
    - Когда b равно 0, значение a является НОД.
    """
    while b != 0:
        # Вычисляем остаток
        reminder = a % b  # % = Mod - нахождение остатка от деления

        # Находим наибольший общий делитель
        a = b
        b = reminder

    # Наибольший общий делитель для a и 0 - это a
    return a


a = 56
b = 98

print(f"НОД для {a}, {b} равен {gcd(a, b)}")

"""Оценка эффективности алгоритма:
1) Поведение алгоритма
    Находит ли он лучшее или просто хорошее решение?
        Алгоритм Евклида всегда находит наилучшее решение, то есть наибольший
        общий делитель (НОД) двух чисел. Это не приближенное решение, а точное.

2) Скорость алгоритма
    Быстрый он или нет?
        Алгоритм Евклида работает за логарифмическое время, пропорциональное
        числу цифр во входных числах. В наихудшем случае время выполнения
        оценивается как O(log(min(a, b))).
        Это делает алгоритм чрезвычайно быстрым для большинства практических
        применений, даже для очень больших чисел.

3) Требования к памяти
    Сколько памяти нужно алгоритму для работы?
        Алгоритм Евклида требует очень мало памяти. Он использует лишь
        несколько целочисленных переменных для хранения текущих значений
        a, b и остатка.
        Таким образом, требования к памяти оцениваются как O(1),
        то есть константное количество памяти.

4) Основные методы, используемые в алгоритме
    Можно ли задействовать повторно для решения подобных задач?
        Основной метод, используемый в алгоритме Евклида, - это вычисление
        остатка от деления (операция %).
        Этот метод может быть повторно использован в различных задачах,
        связанных с нахождением НОД, а также в других числовых алгоритмах,
        где требуется найти делители, кратные числа или остатки.
"""
